#!/bin/sh

TIMEOUT=15
BUFFER=0
QUIET=0
VERBOSE=0

echoerr() {
  if [ "$QUIET" -ne 1 ]; then printf "%s\n" "$*" 1>&2; fi
}

echomsg() {
  if [ "$QUIET" -ne 1 ] && [ "$VERBOSE" -eq 1 ]; then printf "%s\n" "$*" 1>&2; fi
}

usage() {
  exitcode="$1"
  cat << USAGE >&2
Usage:
  $cmdname host:port [-t timeout] [-b buffer] [-- command args]
  -q | --quiet                        Do not output any status messages
  -v | --verbose                        Extra status messages (--quiet takes precedence)
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
  -b BUFFER | --buffer=buffer         A period of time to wait before completing (does not effect timeout)
  -- COMMAND ARGS                     Execute command with args after the test finishes
USAGE
  exit "$exitcode"
}

wait_for() {
 if ! command -v nc >/dev/null; then
    echoerr 'nc command is missing!'
    exit 1
  fi

  echomsg "Starting Wait: $HOST $PORT [-t $TIMEOUT] [-b $BUFFER]"

  success=false

  for i in `seq $TIMEOUT` ; do
    nc -z "$HOST" "$PORT" > /dev/null 2>&1
    
    nc_result=$? # exit status of the last executed command: *0* being success
    if [ $nc_result -eq 0 ] ; then # if success then the host:port is now accepting requests
      success=true
      break
    fi
    sleep 1
  done

  [ "$success" = "true" ] && echomsg "Status: Successful"

  # If successful then attempt to complete
  if [ "$success" = "true" ] ; then

    # If there is a buffer set then sleep before attempting to run command
    if [ "$BUFFER" -ne 0 ] ; then
      echomsg "Starting buffer: $BUFFER second(s)" 
      sleep $BUFFER
    fi

    echomsg "Status: Completed Wait"

    # If there are arguments passed after -- then exec them, otherwise simply exit sucessfully
    if [ $# -gt 0 ] ; then 
      exec "$@"
    fi

    exit 0
  fi

  echoerr "Status: Timed Out" >&2
  exit 1
}

while [ $# -gt 0 ]
do
  case "$1" in
    *:* )
    HOST=$(printf "%s\n" "$1"| cut -d : -f 1)
    PORT=$(printf "%s\n" "$1"| cut -d : -f 2)
    shift 1
    ;;
    -q | --quiet)
    QUIET=1
    shift 1
    ;;
    -v | --verbose)
    VERBOSE=1
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [ "$TIMEOUT" = "" ]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
        ;;
    -b)
    BUFFER="$2"
    if [ "$BUFFER" = "" ]; then break; fi
    shift 2
    ;;
    --buffer=*)
    BUFFER="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break # Anything after this is the args to run after successfully hitting the host:port so leave it (dont shift anymore)
    ;;
    --help)
    usage 0
    ;;
    *)
    echoerr "Unknown argument: $1"
    usage 1
    ;;
  esac
done

if [ "$HOST" = "" -o "$PORT" = "" ]; then
  echoerr "Error: you need to provide a host and port to test."
  usage 2
fi

wait_for "$@"
